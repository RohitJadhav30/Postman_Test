{
	"info": {
		"_postman_id": "ac740fff-acc4-45bd-8e0b-4b472bf2f264",
		"name": "Spotify",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28050809"
	},
	"item": [
		{
			"name": "User's",
			"item": [
				{
					"name": "Current user's profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function(){\r",
									"    pm.expect(pm.response.text()).to.include(\"JadhavrohitJadhavrohit\");\r",
									"});\r",
									"\r",
									"var json = pm.response.json();\r",
									"var userid = json.id;\r",
									"var name = json.display_name;\r",
									"console.log(\"Name: \" + name);\r",
									"console.log(\"Userid: \" + userid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "BQDXRgmd3wpJ-l-DYmaoYxU_dpjA7CFkwZPOFZ_1QBoYBJG6_iuVNkTkk91wmhWKfYuC3C5-hnmfX2s_gnDelzjhReWKDxakawDvb3p5l81BncThy6opO6molusQEpqAjxSqclUYjGO1GQsp16Yt4MfEEw7T3dxx3WHtkeqrB1nib-LKDc84MbJNWbyxpe6SouTUtI4",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "expires_in",
									"value": 3600,
									"type": "number"
								},
								{
									"key": "refresh_token",
									"value": "AQCIeYCHaOYYNl_4B4pCbyh4F82RYG-o1Grq7CzOpbsBovdZrG_jsDBiCwObm_L8zcncHXHLR65c2AhA7tSv3O50rm6-1MUmkoHjvl2MKY0ATmoZZWFYES-xl6B3oH486Tk",
									"type": "string"
								},
								{
									"key": "createdAt",
									"value": "2024-08-10T08:45:16.889Z",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "header",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://accounts.spotify.com/authorize",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "278a6a0526f142009923f96e2d677256",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.spotify.com/api/token",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "Spotify API",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "state",
									"value": "State",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "user-read-private, user-read-email",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "3c7dd68c0d5f45b7921f724ed95e84d7",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Top items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Items array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.items).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Items array should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/top/artists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"top",
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "user's profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.display_name).to.exist;\r",
									"    pm.expect(responseData.external_urls).to.exist;\r",
									"    pm.expect(responseData.href).to.exist;\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.images).to.exist;\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.uri).to.exist;\r",
									"    pm.expect(responseData.followers).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"External URLs object contains a non-empty Spotify URL\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.external_urls.spotify).to.exist.and.to.have.lengthOf.at.least(1, \"Spotify URL should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Followers object contains a non-negative total value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.followers.total).to.be.a('number');\r",
									"    pm.expect(responseData.followers.total).to.be.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/users/smedjan",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"users",
								"smedjan"
							]
						}
					},
					"response": []
				},
				{
					"name": "follow playlist",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"public\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/followers",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"3cEYpjA9oz9GiPac4AsH4n",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "unfollow playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response body is null\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/followers",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"3cEYpjA9oz9GiPac4AsH4n",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get followed artists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/following?type=artist",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow artist or users",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{vault:spotify-api:accessToken}}",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "header",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "expires_in",
									"value": 3600,
									"type": "number"
								},
								{
									"key": "refresh_token",
									"value": "AQCxx4zhMAw1GuRgfdPH0mS-Ue17yTWDPUZyq3LGDAKVm_d7XXBK0rTTjsk-yy9BJYvwuaaSuKeYmrbtG2sDU1zR7hJUQIKy9otEC89Pz1_HE3Bsozs6VAtmIruTpGdB8tg",
									"type": "string"
								},
								{
									"key": "createdAt",
									"value": "2024-08-10T09:51:23.366Z",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://accounts.spotify.com/authorize",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "278a6a0526f142009923f96e2d677256",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.spotify.com/api/token",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "Spotify API",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "state",
									"value": "State",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "user-read-private, user-read-email",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "3c7dd68c0d5f45b7921f724ed95e84d7",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/following?type=artist&ids=yohj4veppd9hgm6mxpi3mvcyc",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								},
								{
									"key": "ids",
									"value": "yohj4veppd9hgm6mxpi3mvcyc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check user follows artist or users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/following/contains?type=artist&ids=2CIMQHirSU0MQqyYHq0eOx%2C57dN52uHvrHOxijzpIgu3E%2C1vCWHaC5f2uS3yhpwWbIA6",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following",
								"contains"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								},
								{
									"key": "ids",
									"value": "2CIMQHirSU0MQqyYHq0eOx%2C57dN52uHvrHOxijzpIgu3E%2C1vCWHaC5f2uS3yhpwWbIA6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if Current user follows playlist",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/followers/contains",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"3cEYpjA9oz9GiPac4AsH4n",
								"followers",
								"contains"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tracks",
			"item": [
				{
					"name": "Get Track",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"tracks",
								"11dFghVXANMlKmJXsNCbNl"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Shows",
			"item": [
				{
					"name": "Get show",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows",
								"38bS44xjbVVZ3No3ByF1dJ"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get several shows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property(\"shows\").that.is.an('array');\r",
									"    \r",
									"    responseData.shows.forEach(function(show) {\r",
									"        pm.expect(show).to.have.property(\"available_markets\");\r",
									"        pm.expect(show).to.have.property(\"copyrights\").that.is.an('array');\r",
									"        pm.expect(show).to.have.property(\"description\");\r",
									"        pm.expect(show).to.have.property(\"explicit\");\r",
									"        pm.expect(show).to.have.property(\"external_urls\").that.is.an('object');\r",
									"        pm.expect(show).to.have.property(\"href\");\r",
									"        pm.expect(show).to.have.property(\"html_description\");\r",
									"        pm.expect(show).to.have.property(\"id\");\r",
									"        pm.expect(show).to.have.property(\"images\").that.is.an('array');\r",
									"        pm.expect(show).to.have.property(\"is_externally_hosted\");\r",
									"        pm.expect(show).to.have.property(\"languages\").that.is.an('array');\r",
									"        pm.expect(show).to.have.property(\"media_type\");\r",
									"        pm.expect(show).to.have.property(\"name\");\r",
									"        pm.expect(show).to.have.property(\"publisher\");\r",
									"        pm.expect(show).to.have.property(\"total_episodes\");\r",
									"        pm.expect(show).to.have.property(\"type\");\r",
									"        pm.expect(show).to.have.property(\"uri\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Total episodes is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.shows).to.be.an('array');\r",
									"    responseData.shows.forEach(function(show) {\r",
									"        pm.expect(show.total_episodes).to.be.a('number');\r",
									"        pm.expect(show.total_episodes).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/shows?ids=5CfCWKI5pZ28U0uOzXkDHe%2C5as3aKmN2k11yfDDDSrvaZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "5CfCWKI5pZ28U0uOzXkDHe%2C5as3aKmN2k11yfDDDSrvaZ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User's saved shows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('href', 'items', 'limit', 'next', 'offset', 'previous', 'total');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Items array is present and has the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.items).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.items).to.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Href, next, and previous fields are null or valid URLs\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.href).to.satisfy((value) => value === null || value.startsWith(\"http\"), \"Href should be null or a valid URL\");\r",
									"    pm.expect(responseData.next).to.satisfy((value) => value === null || value.startsWith(\"http\"), \"Next should be null or a valid URL\");\r",
									"    pm.expect(responseData.previous).to.satisfy((value) => value === null || value.startsWith(\"http\"), \"Previous should be null or a valid URL\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							]
						}
					},
					"response": []
				},
				{
					"name": "save shows for current user",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=5CfCWKI5pZ28U0uOzXkDHe%2C5as3aKmN2k11yfDDDSrvaZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "5CfCWKI5pZ28U0uOzXkDHe%2C5as3aKmN2k11yfDDDSrvaZ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove users saved shows",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=5CfCWKI5pZ28U0uOzXkDHe%2C5as3aKmN2k11yfDDDSrvaZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "5CfCWKI5pZ28U0uOzXkDHe%2C5as3aKmN2k11yfDDDSrvaZ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check users saved shows",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=5CfCWKI5pZ28U0uOzXkDHe%2C5as3aKmN2k11yfDDDSrvaZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5CfCWKI5pZ28U0uOzXkDHe%2C5as3aKmN2k11yfDDDSrvaZ"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Search for item",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=remaster%2520track%3ADoxy%2520artist%3AMiles%2520Davis&type=album",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "remaster%2520track%3ADoxy%2520artist%3AMiles%2520Davis"
								},
								{
									"key": "type",
									"value": "album"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Player",
			"item": [
				{
					"name": "Transfer Playback",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/player",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"player"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get available devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/player/devices",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"player",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Currently playing track",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/player/currently-playing",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"player",
								"currently-playing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start/Resume Playback",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"context_uri\": \"spotify:album:5ht7ItJgpBH7W6vJ5BqpPr\",\r\n    \"offset\": {\r\n        \"position\": 5\r\n    },\r\n    \"position_ms\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/player/play`",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"player",
								"play`"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Markets",
			"item": [
				{
					"name": "Get available markets",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/markets",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"markets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Genere",
			"item": [
				{
					"name": "Get available genere seeds",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/recommendations/available-genre-seeds",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"recommendations",
								"available-genre-seeds"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Episodes",
			"item": [
				{
					"name": "Get several episodes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save episode for current user",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?ids=77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove users saved episodes",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"string\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?ids=7ouMYWpwJ422jRcDASZB7P%2C4VqPOruhp5EdPBeR92t6lQ%2C2takcwOaAZWiXQijPHIx7B",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "7ouMYWpwJ422jRcDASZB7P%2C4VqPOruhp5EdPBeR92t6lQ%2C2takcwOaAZWiXQijPHIx7B"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check users saved episodes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes/contains?ids=77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chapters",
			"item": [
				{
					"name": "Get several chapters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/chapters?ids=0IsXVP0JmcB2adSE338GkK%2C3ZXb8FKZGU0EHALYX6uCzU%2C0D5wENdkdwbqlrHoaJ9g29",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"chapters"
							],
							"query": [
								{
									"key": "ids",
									"value": "0IsXVP0JmcB2adSE338GkK%2C3ZXb8FKZGU0EHALYX6uCzU%2C0D5wENdkdwbqlrHoaJ9g29"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a chapter",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/chapters/0D5wENdkdwbqlrHoaJ9g29",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"chapters",
								"0D5wENdkdwbqlrHoaJ9g29"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get Several browse categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Categories object has the correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.categories).to.be.an('object');\r",
									"    pm.expect(responseData.categories).to.have.property('href');\r",
									"    pm.expect(responseData.categories).to.have.property('items').that.is.an('array');\r",
									"    pm.expect(responseData.categories).to.have.property('limit');\r",
									"    pm.expect(responseData.categories).to.have.property('next');\r",
									"    pm.expect(responseData.categories).to.have.property('offset');\r",
									"    pm.expect(responseData.categories).to.have.property('previous');\r",
									"    pm.expect(responseData.categories).to.have.property('total');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Items array and its elements have the correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.categories).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.categories.items).to.exist.and.to.be.an('array');\r",
									"\r",
									"    responseData.categories.items.forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.href).to.exist.and.to.be.a('string');\r",
									"        pm.expect(item.id).to.exist.and.to.be.a('string');\r",
									"        pm.expect(item.icons).to.exist.and.to.be.an('array');\r",
									"        pm.expect(item.name).to.exist.and.to.be.a('string');\r",
									"\r",
									"        item.icons.forEach(function(icon) {\r",
									"            pm.expect(icon).to.be.an('object');\r",
									"            pm.expect(icon.height).to.exist.and.to.be.a('number');\r",
									"            pm.expect(icon.url).to.exist.and.to.be.a('string');\r",
									"            pm.expect(icon.width).to.exist.and.to.be.a('number');\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single browse categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories/dinner",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								"dinner"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Audiobooks",
			"item": [
				{
					"name": "Gen an audiobook",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/audiobooks/7iHfbu1YPACw6oZPAFJtqe",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"audiobooks",
								"7iHfbu1YPACw6oZPAFJtqe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get several audiobook",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/audiobooks?ids=18yVqkdbdRvS24c0Ilj2ci%2C1HGw3J3NxZO1TP1BTtVhpZ%2C7iHfbu1YPACw6oZPAFJtqe",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"audiobooks"
							],
							"query": [
								{
									"key": "ids",
									"value": "18yVqkdbdRvS24c0Ilj2ci%2C1HGw3J3NxZO1TP1BTtVhpZ%2C7iHfbu1YPACw6oZPAFJtqe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save audiobooks for current user",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/audiobooks?ids=18yVqkdbdRvS24c0Ilj2ci%2C1HGw3J3NxZO1TP1BTtVhpZ%2C7iHfbu1YPACw6oZPAFJtqe",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"audiobooks"
							],
							"query": [
								{
									"key": "ids",
									"value": "18yVqkdbdRvS24c0Ilj2ci%2C1HGw3J3NxZO1TP1BTtVhpZ%2C7iHfbu1YPACw6oZPAFJtqe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove users saved audiobooks",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/audiobooks?ids=18yVqkdbdRvS24c0Ilj2ci%2C1HGw3J3NxZO1TP1BTtVhpZ%2C7iHfbu1YPACw6oZPAFJtqe",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"audiobooks"
							],
							"query": [
								{
									"key": "ids",
									"value": "18yVqkdbdRvS24c0Ilj2ci%2C1HGw3J3NxZO1TP1BTtVhpZ%2C7iHfbu1YPACw6oZPAFJtqe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check users saved audiobooks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/audiobooks/contains?ids=18yVqkdbdRvS24c0Ilj2ci%2C1HGw3J3NxZO1TP1BTtVhpZ%2C7iHfbu1YPACw6oZPAFJtqe",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"audiobooks",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "18yVqkdbdRvS24c0Ilj2ci%2C1HGw3J3NxZO1TP1BTtVhpZ%2C7iHfbu1YPACw6oZPAFJtqe"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Artist",
			"item": [
				{
					"name": "Get artists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.external_urls).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.followers).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.genres).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.href).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.images).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.popularity).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.uri).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"0TnOYISbd1XYRBk9myaseg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get several artist",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/artists?ids=2CIMQHirSU0MQqyYHq0eOx%2C57dN52uHvrHOxijzpIgu3E%2C1vCWHaC5f2uS3yhpwWbIA6",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "ids",
									"value": "2CIMQHirSU0MQqyYHq0eOx%2C57dN52uHvrHOxijzpIgu3E%2C1vCWHaC5f2uS3yhpwWbIA6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get artist's albums",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg/albums",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"0TnOYISbd1XYRBk9myaseg",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get artists top tracks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg/top-tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"0TnOYISbd1XYRBk9myaseg",
								"top-tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get artist's related artist's",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg/related-artists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"0TnOYISbd1XYRBk9myaseg",
								"related-artists"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Album",
			"item": [
				{
					"name": "Get album",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"4aawyAB9vmqN3uQ7FjRGTy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get several albums",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums?ids=382ObEPsp2rxGrnsizN5TX%2C1A2GTWGtFfWp7KSQTwWOyo%2C2noRn2Aes5aoNVsU6iWThc",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "382ObEPsp2rxGrnsizN5TX%2C1A2GTWGtFfWp7KSQTwWOyo%2C2noRn2Aes5aoNVsU6iWThc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get album tracks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"4aawyAB9vmqN3uQ7FjRGTy",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{vault:spotify-api:accessToken}}",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"4aawyAB9vmqN3uQ7FjRGTy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users saved albums",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save album for current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"382ObEPsp2rxGrnsizN5TX\",\r\n        \"1A2GTWGtFfWp7KSQTwWOyo\",\r\n        \"2noRn2Aes5aoNVsU6iWThc\"\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums?ids=382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "user-read-private, user-read-email, playlist-modify-public, playlist-modify-private, playlist-read-private, playlist-read-collaborative, ugc-image-upload, user-top-read, user-follow-read, user-follow-modify, user-library-read, user-library-modify, user-read-playback-position, user-read-playback-state, user-modify-playback-state, user-read-currently-playing, user-read-recently-played\n",
				"type": "string"
			},
			{
				"key": "state",
				"value": "State",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "3c7dd68c0d5f45b7921f724ed95e84d7",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "be5ceb51dd8e4248aa84f933b1fb7f69",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://accounts.spotify.com/api/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://accounts.spotify.com/authorize?",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "http://localhost:3000",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "Spotify_Token",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}